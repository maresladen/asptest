@{ 
    ViewData["Title"] = "功能点"; 
}

<div id="featurebody" class="box box-primary" style="padding-top: 6px;">
            <div class="box-header ui-sortable-handle" style="cursor: move; margin-top: 40px">
              <i class="ion ion-clipboard"></i>

              <h3 class="box-title">功能点管理</h3>

            </div>
            <!-- /.box-header -->
            <div class="box-body">
              <ul class="todo-list ui-sortable">
                <li v-for="item in ItemData">
                  <!-- drag handle -->
                      <span class="handle ui-sortable-handle">
                        <i class="fa fa-ellipsis-v"></i>
                        <i class="fa fa-ellipsis-v"></i>
                      </span>
                  <!-- todo text -->
                  <span class="text">{{item.featuresName}}</span>
                  <!--<small class="label label-danger"><i class="fa  fa-user-plus"></i>顾锋</small>-->
                  <div class="tools">
                    <i class="fa fa-jsfiddle" v-on:click="doHTML(item.featuresId)">HTML</i>
                    <i class="fa fa-maxcdn" v-on:click="doMarkDown(item.featuresId,item.mdId)">MD</i>
                    <i class="fa fa-edit" v-on:click="editItem(item)">编辑</i>
                    <i class="fa fa-trash-o" v-on:click="delItem(item)">删除</i>
                  </div>
                </li>
              </ul>
            </div>
            <!-- /.box-body -->
            <div class="box-footer clearfix no-border">
              <button type="button" class="btn btn-default pull-right" v-on:click="addItem">
                <i class="fa fa-plus"></i> 新增功能点</button>
            </div>
          </div>


<div class="modal fade" id="featureModal" tabindex="-1" role="dialog" aria-labelledby="proManageModalLabel" aria-hidden="false">
    <div class="modal-dialog" style="width: 100%">
        <div class="modal-content">
                <div class="close rotate">
                    <span class="icon fa fa-close" onclick="$('#featureModal').modal('hide')"></span>
                </div>
            <div class="alert bg-gray">
                <h4><i class="icon fa fa-edit"></i>新增功能点 
                </h4>
            </div>
            <div class="modal-body">
 @Html.Partial("../Extends/featureModal.cshtml")
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" onclick="$('#featureModal').modal('hide')">关闭 </button>
            </div>
        </div>
    </div>
</div>


<!--这里写一个通用的modal-->
<!--以后的写法,写在layout里面,只做通知提醒用,其他的模板的内容需要写父子组件通信方法-->

<script>

    var proVue = new Vue({
      el: "#featurebody",
      data: {
        ItemData: @Html.Raw(ViewData["FeatureData"])
      },
      methods: {
          addItem : function(){
            modalHerdV.featureEntity = {featuresId : 0, featuresName: '' ,projectId :'@ViewData["ProjectId"]'};
            $('#featureModal').modal('show')
            jsVue.jsData.splice(0,jsVue.jsData.length);
            cssVue.cssData.splice(0,cssVue.cssData.length);
          },
          doMarkDown :function(fid,mid){
            window.open("/Feature/"+ fid + "/MarkDown/" +mid);

          },
          doHTML :function(fid){

            window.open("/Feature/HTML/" + fid);
          },
          delItem : function(item){
            //TODO:  这里要加删除的询问
            this.$http.delete('/Feature/'+item.featuresId).then(response => {
              console.log(response.data)
            }, rep => {
              console.log('失败')
            });
          },
          editItem : function(item){

            modalHerdV.featureEntity = {featuresId : item.featuresId, featuresName: item.featuresName ,projectId : item.projectId};
            jsVue.jsData.splice(0,jsVue.jsData.length);
            cssVue.cssData.splice(0,cssVue.cssData.length);
            for(var i in item.featuresDepends){
              var pd =item.featuresDepends[i];
              if(pd.fileType == 'javascript'){
                jsVue.jsData.push({ name: pd.fileName, show: true });
              }
              else if(pd.fileType == 'css'){
                cssVue.cssData.push({ name: pd.fileName, show: true });
              }
            }
            $('#featureModal').modal('show')
          },
          dotest :function(){
            testV.bindHTML(this.ItemData[0].featuresMardDown);

              
          }
      },
      created: function () {
       }
    })
    

    // var testV =new Vue({

    //   el:"#testdiv",
    //   data :{
    //     testData :''
    //   },
    //   methods:{
    //     bindHTML : function(htmlData){
    //       this.testData =htmlData;
    //         this.$nextTick(function(){
    //           $(".chartjs").each(function () {
    //             try {
    //                 new Chart($(this), JSON.parse($(this).text()))
    //             }
    //             catch (e) {
    //               $(this).replaceWith('<pre>Chart.js complains: "' + e + '"</pre>')
    //             }
             
    //           });
    //         })
            
    //     }
    //   }

    // })

</script>